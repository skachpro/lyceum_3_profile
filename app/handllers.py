
import emoji

from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, callback_query, InputFile
from app.pygithub import upload_to_github
import aiohttp
import app.keyboards as kb
from app import database as db
import os
from dotenv import load_dotenv
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters.logic import or_f

load_dotenv()
bot = Bot(token=os.getenv('API_TOKEN'))
password = os.getenv("PASSWORD")

router = Router()

class Test(StatesGroup):
    fav_subj = State()
    skills = State()
    develop_skills = State()
    favorite_tasks = State()
    free_time = State()
    future_profession = State()

#–°—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    await db.remember_me(user_id)
    answer = f'<b>–í—ñ—Ç–∞—î–º–æ </b>{user_name}!\n–ü—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞—à—É –¥–æ–ø–æ–º–æ–≥—É –∑ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –î–µ—Å—è—Ç–∏–∫–ª–∞—Å–Ω–∏–∫—ñ–≤.'
    # await message.answer(
    #     f"–í—ñ—Ç–∞—î–º–æ {user_name}!\n–ü—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞—à—É –¥–æ–ø–æ–º–æ–≥—É –∑ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –î–µ—Å—è—Ç–∏–∫–ª–∞—Å–Ω–∏–∫—ñ–≤.",
    #     reply_markup=kb.main)
    await message.answer(answer, parse_mode='HTML',reply_markup=kb.main)


# –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å (–ø–æ –ø–∞—Ä–æ–ª—é)
@router.message(Command(f'{password}'))
async def admin_panel(message: Message):
    user_name = message.from_user.first_name
    await message.answer(f"–í—ñ—Ç–∞—î–º–æ {user_name}! –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
                         reply_markup=kb.admin)

class ProfileStates(StatesGroup):
    step = State()

@router.message(or_f((F.text == emoji.emojize("–ü–µ—Ä–µ–ª—ñ–∫ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ üìã")),(F.text == '/profiles')))
async def profiles(message: Message, state: FSMContext):
    profiles_list = await db.get_profiles()
    if not profiles_list:
        await message.answer("–ü—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return


    await state.set_state(ProfileStates.step)
    await state.update_data(step=0)


    response = (
        f"<b>–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é:</b> {profiles_list[0]['profile_name']}\n"
        f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {profiles_list[0]['profile_info']}"
    )
    await message.answer(response, parse_mode='HTML', reply_markup=kb.profile_catalog )


@router.callback_query(F.data == "next")
async def about_next(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    step = data.get("step", 0) + 1
    print(step)

    profiles_list = await db.get_profiles()
    if step < len(profiles_list):
        response = (
            f"<b>–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é:</b> {profiles_list[step]['profile_name']}\n"
            f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {profiles_list[step]['profile_info']}"
        )
        await callback_query.message.edit_text(response, parse_mode='HTML', reply_markup=kb.profile_catalog )

        await state.update_data(step=step)
    else:
        await callback_query.answer("–ë—ñ–ª—å—à–µ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –Ω–µ–º–∞—î.")

@router.callback_query(F.data == "back")
async def about_next(callback_query: CallbackQuery, state: FSMContext):

    profiles_list = await db.get_profiles()
    data = await state.get_data()
    step = data.get("step", len(profiles_list)) - 1
    print(step)

    if step >= 0:
        response = (
            f"<b>–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é:</b> {profiles_list[step]['profile_name']}\n"
            f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {profiles_list[step]['profile_info']}"
        )
        await callback_query.message.edit_text(response, parse_mode='HTML', reply_markup=kb.profile_catalog )

        await state.update_data(step=step)
    else:
        await callback_query.answer("–ë—ñ–ª—å—à–µ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –Ω–µ–º–∞—î.")

class Call_Schedule(StatesGroup):
    photo = State()
@router.message(F.text == '–ß–∞—Å –ø—Ä–∏–π–æ–º—É')
async def call_schedule_admin(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —á–∞—Å—É –ø—Ä–∏–π–æ–º—É")
    await state.set_state(Call_Schedule.photo)

@router.message(Call_Schedule.photo)
async def call_schedule_set_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await db.execute_query("""
            INSERT INTO time_vizit (photo_id) VALUES (%s)
        """, (photo_id,))

    file_info = await bot.get_file(photo_id)
    file_path = file_info.file_path

    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/file/bot{os.getenv('BOT_API')}/{file_path}") as resp:
            if resp.status == 200:
                file_content = await resp.read()
                file_name = f"{photo_id}.jpg"
                photo_url = f"https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/refs/heads/main/photos/{photo_id}.jpg"
                result = upload_to_github(file_name, file_content)
                await message.answer_photo(photo=photo_url)
            else:
                await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç–∏ —Ñ–æ—Ç–æ.")
    await message.answer("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ")



# –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
@router.message(F.text == f'–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ üåê')
async def socials(message: Message):
    await message.answer(f"–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ: \n", reply_markup=kb.socials_networks)


# –ü—Ä–æ –Ω–∞—Å
@router.message(F.text == f'–ü—Ä–æ –Ω–∞—Å üè´')
async def about_us(message: Message):
    await message.answer(f"""<b>–ö–æ–º—É–Ω–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Å–≤—ñ—Ç–∏ \n‚Äú–õ—ñ—Ü–µ–π ‚Ññ3 —ñ–º–µ–Ω—ñ –ê—Ä—Ç–µ–º–∞ –ú–∞–∑—É—Ä–∞–•–º–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏‚Äù</b>\n\n–í –õ—ñ—Ü–µ—ó ‚Ññ3 —ñ–º–µ–Ω—ñ –ê—Ä—Ç–µ–º–∞ –ú–∞–∑—É—Ä–∞ –ø—Ä–∞—Ü—é—é—Ç—å –≤—ñ–¥–æ–º—ñ –≤—á–∏—Ç–µ–ª—ñ, –∞–≤—Ç–æ—Ä–∏ –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤ —Ç–∞ –ø–æ—Å—ñ–±–Ω–∏–∫—ñ–≤,\n–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ–ª—ñ–º–ø—ñ–∞–¥,\n–∫–æ–Ω–∫—É—Ä—Å—É-–∑–∞—Ö–∏—Å—Ç—É –ú–ê–ù —ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –∑–º–∞–≥–∞–Ω—å...<a href='http://tbl.km.ua/'>–¥–∞–ª—ñ</a>\n\n""",reply_markup=kb.about, parse_mode='HTML')


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
@router.message(F.text == '–ß–∞—Å –ø—Ä–∏–π–æ–º—É üïì')
async def settings(message: Message):
    #await message.answer(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    photo = await db.execute_query("""
        SELECT photo_id FROM result_profile BY id DESC LIMIT 1
    """,fetch="fetchone")
    if photo:
        print(photo, "     1")
        photo = f'https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/master/{photo['photo_id']}.jpg'

    else:
        print(photo, "     2")
    await message.answer_photo(photo=photo)

# –ü–æ—á–∞—Ç–∏ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
@router.message(F.text == f"–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è üíº")
async def start_test(message: Message, state:FSMContext):
    await message.answer("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–æ.")
    await state.set_state(Test.fav_subj)
    await message.answer("1. –û–±–µ—Ä—ñ—Ç—å —É–ª—é–±–ª–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç.", reply_markup=kb.test_subj)


#–ü–æ—á–∞—Ç–æ–∫ –í—ñ–¥–ª–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
@router.callback_query(Test.fav_subj)
async def que1(callback_query: CallbackQuery, state: FSMContext):
    # user_id = callback_query.from_user.id
    answer = callback_query.data
    # await db.add_subj(answer, user_id)
    await state.update_data(fav_subj=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.skills)
    await callback_query.message.edit_text(f"2. –©–æ –≤–∞–º –≤–¥–∞—î—Ç—å—Å—è –Ω–∞–π–∫—Ä–∞—â–µ?", reply_markup=kb.skills)

@router.callback_query(Test.skills)
async def que2(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(skills=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.develop_skills)
    await callback_query.message.edit_text(f"3. –Ø–∫—ñ –Ω–∞–≤–∏—á–∫–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏?", reply_markup=kb.develop_skills)

@router.callback_query(Test.develop_skills)
async def que3(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(develop_skills=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.favorite_tasks)
    await callback_query.message.edit_text(f"4. –Ø–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∞–º –Ω–∞–π–±—ñ–ª—å—à–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏?", reply_markup=kb.favorite_tasks)

@router.callback_query(Test.favorite_tasks)
async def que3(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(favorite_tasks=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.free_time)
    await callback_query.message.edit_text(f"5. –Ø–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å?", reply_markup=kb.free_time)

@router.callback_query(Test.free_time)
async def que4(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(free_time=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.future_profession)
    await callback_query.message.edit_text(f"6. –ö–∏–º —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏?", reply_markup=kb.future_profession)

@router.callback_query(Test.future_profession)
async def test_end(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(future_profesion=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await callback_query.message.edit_text(f"–¢–µ—Å—Ç –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    data = await state.get_data()
    math = 0
    it = 0
    history = 0
    law = 0
    geography = 0
    chem_bio = 0
    ukr_philo = 0
    foreign_philo = 0
    sports_military = 0
    art = 0
    #await callback_query.message.answer(", ".join(map(str, data.values())))
    for value in data.values():
        if value == 'math':
            math += 1
        elif value == 'it':
            it += 1
        elif value == 'history':
            history += 1
        elif value == 'geography':
            geography += 1
        elif value == 'chem_bio':
            chem_bio += 1
        elif value == 'ukr_philo':
            ukr_philo += 1
        elif value == 'law':
            law += 1
        elif value == 'foreign_philo':
            foreign_philo += 1
        elif value == 'sports_military':
            sports_military += 1
        elif value == 'art':
            art += 1

    await callback_query.message.edit_text(
        f"<b>–°—Ö–∏–ª—å–Ω—ñ—Å—Ç—å –¥–æ:</b>\n"
        f"<code>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {math * 16}%\n"
        f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏: {it * 16}%\n"
        f"–Ü—Å—Ç–æ—Ä—ñ—ó: {history * 16}%\n"
        f"–ì–µ–æ–≥—Ä–∞—Ñ—ñ—ó: {geography * 16}%\n"
        f"–•—ñ–º—ñ—ó/–ë—ñ–æ–ª–æ–≥—ñ—ó: {chem_bio * 16}%\n"
        f"–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó: {ukr_philo * 16}%\n"
        f"–ü—Ä–∞–≤–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {law * 16}%\n"
        f"–Ü–Ω–æ–∑–µ–º–Ω–æ—ó —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó: {foreign_philo * 16}%\n"
        f"–í—ñ–π—Å—å–∫–æ–≤–æ/–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {sports_military * 16}%\n"
        f"–•—É–¥–æ–∂–Ω—å–æ-–ï—Å—Ç–µ—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {art * 16}%</code>",
        parse_mode="html"
    )
    data = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": math * 16,
        "–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": it * 16,
        "–Ü—Å—Ç–æ—Ä—ñ—è": history * 16,
        "–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è": geography * 16,
        "–•—ñ–º—ñ—è/–ë—ñ–æ–ª–æ–≥—ñ—è": chem_bio * 16,
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ñ—ñ–ª–æ–ª–æ–≥—ñ—è": ukr_philo * 16,
        "–ü—Ä–∞–≤–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å": law * 16,
        "–Ü–Ω–æ–∑–µ–º–Ω–∞ —Ñ—ñ–ª–æ–ª–æ–≥—ñ—è": foreign_philo * 16,
        "–í—ñ–π—Å—å–∫–æ–≤–æ/–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å": sports_military * 16,
        "–•—É–¥–æ–∂–Ω—å–æ-–ï—Å—Ç–µ—Ç–∏—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å": art * 16
    }
    await state.clear()




# –ê–¥–º—ñ–Ω –ü–∞–Ω–µ–ª—å - –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
# @router.message(F.text == '–ê–¥–º—ñ–Ω –ü–∞–Ω–µ–ª—å')
# async def admin_panel_add_profile(message: Message):
#     await message.answer("–ê–¥–º—ñ–Ω –ü–∞–Ω–µ–ª—å –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ", reply_markup=kb.admin_kbd)
#
#     await message.answer("–í–≤–µ–¥—ñ—Ç—å –ù–∞–∑–≤—É –ü—Ä–æ—Ñ—ñ–ª—é:")
#     profile_name = (await bot.wait_for('message')).text
#
#     await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å:")
#     profile_info = (await bot.wait_for('message')).text
#
#     await db.add_profile(profile_name, profile_info)
#     await message.answer(
#         f"–û–ø–µ—Ä–∞—Ü—ñ—è –í—ñ–¥–±—É–ª–∞—Å—å.\n–î–æ–¥–∞–Ω–æ:\n–ù–∞–∑–≤–∞ –ü—Ä–æ—Ñ—ñ–ª—é: {profile_name}\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å: {profile_info}")


# –í–∏–π—Ç–∏ –∑ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
@router.message(F.text == '–í–∏–π—Ç–∏ –∑ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ')
async def leave_admin(message: Message):
    await cmd_start(message)
